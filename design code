`timescale 1ns / 1ps
module matrix_inverse #(
  parameter N = 3
)(
  input logic signed  [N-1:0][N-1:0] A,
  output logic signed [N-1:0][N-1:0] B
);
  // Local variables
  logic signed det;
  logic determinant_is_zero;
  // Calculate the determinant of the input matrix
  always_comb begin
    integer i;
    det = 0;
    for (i = 0; i < N; i++) begin
      det += A[0][i] * (A[1][(i + 1) % N] * A[2][(i + 2) % N] -
                        A[1][(i + 2) % N] * A[2][(i + 1) % N]);
    end
  end
  always_comb begin
    determinant_is_zero = (det == 0);
  end
  always_comb begin
    if (determinant_is_zero) begin
      
      integer i, j;
      for (i = 0; i < N; i++) begin
        for (j = 0; j < N; j++) begin
          B[i][j] = 0;
        end
      end
    end else begin
      integer i, j;
      for (i = 0; i < N; i++) begin
        for (j = 0; j < N; j++) begin
          B[i][j] = ((A[(i + 1) % N][(j + 1) % N] * A[(i + 2) % N][(j + 2) % N]) -
                      (A[(i + 1) % N][(j + 2) % N] * A[(i + 2) % N][(j + 1) % N])) / det;
        end
      end
    end
  end
endmodule
